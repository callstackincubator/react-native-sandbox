name: 'Setup Tools from .tool-versions'
description: 'Automatically setup tools (Node.js, Ruby, etc.) based on .tool-versions file'
author: 'react-native-multinstance'

inputs:
  cache:
    description: 'Enable caching for package managers'
    required: false
    default: 'true'

outputs:
  nodejs-version:
    description: 'Node.js version from .tool-versions'
    value: ${{ steps.read-versions.outputs.nodejs-version }}
  node-version:
    description: 'Node.js version (alias)'
    value: ${{ steps.read-versions.outputs.node-version }}
  ruby-version:
    description: 'Ruby version from .tool-versions'
    value: ${{ steps.read-versions.outputs.ruby-version }}
  python-version:
    description: 'Python version from .tool-versions'
    value: ${{ steps.read-versions.outputs.python-version }}
  java-version:
    description: 'Java version from .tool-versions'
    value: ${{ steps.read-versions.outputs.java-version }}

runs:
  using: 'composite'
  steps:
    - name: Read .tool-versions
      id: read-versions
      shell: bash
      run: |
        if [[ ! -f ".tool-versions" ]]; then
          echo "❌ .tool-versions not found"
          exit 1
        fi

        echo "📖 Reading tool versions from .tool-versions"

        # Read each line from .tool-versions
        while IFS= read -r line || [[ -n "$line" ]]; do
          # Skip empty lines and comments
          if [[ -z "$line" ]] || [[ "$line" =~ ^[[:space:]]*# ]]; then
            continue
          fi

          # Parse tool name and version
          if [[ "$line" =~ ^([^[:space:]]+)[[:space:]]+(.+)$ ]]; then
            tool_name="${BASH_REMATCH[1]}"
            tool_version="${BASH_REMATCH[2]}"

            # Set outputs with original names
            echo "${tool_name}-version=${tool_version}" >> "$GITHUB_OUTPUT"

            # Common aliases for popular tools
            case "$tool_name" in
              "nodejs")
                echo "node-version=${tool_version}" >> "$GITHUB_OUTPUT"
                ;;
              "python")
                echo "py-version=${tool_version}" >> "$GITHUB_OUTPUT"
                ;;
              "java")
                echo "jdk-version=${tool_version}" >> "$GITHUB_OUTPUT"
                ;;
            esac

            echo "✅ Found ${tool_name}: ${tool_version}"
          fi
        done < ".tool-versions"

    - name: Setup Node.js
      if: steps.read-versions.outputs.nodejs-version
      uses: actions/setup-node@v4
      with:
        node-version: ${{ steps.read-versions.outputs.nodejs-version }}
        cache: ${{ inputs.cache == 'true' && 'yarn' || '' }}

    - name: Setup Ruby
      if: steps.read-versions.outputs.ruby-version
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ steps.read-versions.outputs.ruby-version }}
        bundler-cache: ${{ inputs.cache }}

    - name: Setup Python
      if: steps.read-versions.outputs.python-version
      uses: actions/setup-python@v5
      with:
        python-version: ${{ steps.read-versions.outputs.python-version }}
        cache: ${{ inputs.cache == 'true' && 'pip' || '' }}

    - name: Setup Java
      if: steps.read-versions.outputs.java-version
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: ${{ steps.read-versions.outputs.java-version }}

branding:
  icon: 'settings'
  color: 'blue'