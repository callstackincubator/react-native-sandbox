import type React from 'react'
import type {HostComponent, ViewProps} from 'react-native'
import {
  codegenNativeCommands,
  codegenNativeComponent,
  CodegenTypes,
} from 'react-native'

/**
 * Error event structure passed from the native sandbox to JavaScript.
 * Contains detailed information about errors that occur within the sandbox.
 */
export interface ErrorEvent {
  /** The name/type of the error (e.g., 'TypeError', 'ReferenceError') */
  name: string

  /** Human-readable error message describing what went wrong */
  message: string

  /** Optional stack trace showing where the error occurred */
  stack?: string

  /** Whether this error is fatal and crashed the sandbox */
  isFatal?: boolean
}

/**
 * Message event structure for communication from sandbox to parent.
 * Wraps arbitrary data sent from the sandboxed React Native instance.
 */
export interface MessageEvent {
  /** The actual data payload sent from the sandbox (can be any serializable type) */
  data: CodegenTypes.UnsafeMixed
}

/**
 * Native props interface for the SandboxReactNativeView component.
 * Extends ViewProps and defines all properties that can be passed to the native view.
 */
export interface NativeProps extends ViewProps {
  /**
   * The name of the React Native module to load in the sandbox.
   * Must match with the registered component name from the JavaScript bundle
   */
  moduleName: string

  /** Optional path or URL to the JavaScript bundle source */
  jsBundleSource?: string

  /** Initial properties to pass to the sandboxed app's root component */
  initialProperties?: CodegenTypes.UnsafeMixed

  /** Launch options for configuring the sandbox environment */
  launchOptions?: CodegenTypes.UnsafeMixed

  /** Array of TurboModule names allowed in the sandbox */
  allowedTurboModules?: readonly string[]

  /** Internal flag indicating if onMessage handler is provided */
  hasOnMessageHandler?: boolean

  /** Internal flag indicating if onError handler is provided */
  hasOnErrorHandler?: boolean

  /** Handler for messages sent from the sandbox */
  onMessage?: CodegenTypes.BubblingEventHandler<MessageEvent>

  /** Handler for errors that occur in the sandbox */
  onError?: CodegenTypes.BubblingEventHandler<ErrorEvent>
}

export type NativeSandboxReactNativeViewComponentType =
  HostComponent<NativeProps>

interface NativeCommands {
  /**
   * Send a message to the sandboxed React Native instance.
   *
   * @param viewRef - Reference to the native view component
   * @param message - JSON-serialized message to send to the sandbox
   */
  postMessage: (
    viewRef: React.ElementRef<NativeSandboxReactNativeViewComponentType>,
    message: string
  ) => void
}

export const Commands: NativeCommands = codegenNativeCommands<NativeCommands>({
  supportedCommands: ['postMessage'],
})

/**
 * The native SandboxReactNativeView component generated by React Native's codegen.
 * This is the actual native view implementation that provides the sandbox functionality.
 */
export default codegenNativeComponent<NativeProps>(
  'SandboxReactNativeView'
) as NativeSandboxReactNativeViewComponentType
